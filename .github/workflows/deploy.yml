name: Deploy Build to AWS

on:
  push:
    branches:
      - aws #TODO: Update to main before merge

jobs:
  Format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Lint with flake8
        uses: py-actions/flake8@v2

      - name: Format with Black
        uses: psf/black@stable

  Deploy:
    needs: Format
    runs-on: ubuntu-latest
    env:
      COMMIT_TAG: ${{ github.sha }}
      DEPLOY_BUNDLE_BUCKET: ${{ vars.DEPLOY_BUNDLE_BUCKET }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      LAUNCH_TEMPLATE_ID: ${{ vars.LAUNCH_TEMPLATE_ID }}
      TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clean up disk space
        run: |
          docker system prune -af
          sudo rm -rf /usr/local/lib/python3.9/site-packages/nvidia
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Copy .env file
        run: cp .env.template .env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker buildx build --platform linux/arm64 -t backend:$COMMIT_TAG --load .
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Tag, and push latest docker image to Amazon ECR
        run: |
          docker tag backend:$COMMIT_TAG $ECR_REPOSITORY:$COMMIT_TAG
          docker push $ECR_REPOSITORY:$COMMIT_TAG

      - name: Build release bundle
        run: |
          zip $COMMIT_TAG.zip docker-compose-aws.yml -r devops/
          aws s3 cp $COMMIT_TAG.zip $DEPLOY_BUNDLE_BUCKET

      - name: Install Boto and AWS CLI
        run: pip install awscli boto3

      - name: Deploy new EC2 instance from launch template
        run: |
          USER_DATA=$(cat <<EOF
          #!/bin/bash
          echo "Updating release information..."
          echo "export RELEASE_BUNDLE_NAME=${COMMIT_TAG}.zip" >> /etc/environment
          echo "export RELEASE=${COMMIT_TAG}" >> /etc/environment
          source /etc/environment
          EOF
          )          

          INSTANCE_ID=$(aws ec2 run-instances \
            --launch-template LaunchTemplateId=$LAUNCH_TEMPLATE_ID \
            --user-data "$USER_DATA" \
            --query 'Instances[0].InstanceId' --output text)

          echo "Waiting for EC2 instance $INSTANCE_ID to be running..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          echo "Deployment triggered. Instance ID: $INSTANCE_ID"

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Register instance with target group
        run: |
          # Get the instance ID from the previous step
          INSTANCE_ID="${{ steps.deploy-ec2.outputs.instance_id }}"
          
          # Wait for instance to pass status checks
          echo "Waiting for instance $INSTANCE_ID to pass status checks..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PrivateIpAddress' \
            --output text)
          
          aws elbv2 register-targets \
            --target-group-arn $TARGET_GROUP_ARN \
            --targets Id=$INSTANCE_ID
          
          echo "Instance $INSTANCE_ID registered with target group $TARGET_GROUP_ARN"
          
          echo "Waiting for target to become healthy in target group..."
          aws elbv2 wait target-in-service \
            --target-group-arn $TARGET_GROUP_ARN \
            --targets Id=$INSTANCE_ID
          
          echo "Instance $INSTANCE_ID is now healthy in target group $TARGET_GROUP_ARN"