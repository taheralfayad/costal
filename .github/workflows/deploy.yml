name: Deploy Build to AWS

on:
  push:
    branches:
      - main

jobs:
  Format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Lint with flake8
        uses: py-actions/flake8@v2

      - name: Format with Black
        uses: psf/black@stable

  Deploy:
    needs: Format
    runs-on: ubuntu-latest
    env:
      COMMIT_TAG: ${{ github.sha }}
      DEPLOY_BUNDLE_BUCKET: ${{ vars.DEPLOY_BUNDLE_BUCKET }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      LAUNCH_TEMPLATE_ID: ${{ vars.LAUNCH_TEMPLATE_ID }}
      TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clean up disk space
        run: |
          docker system prune -af
          sudo rm -rf /usr/local/lib/python3.9/site-packages/nvidia
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Build and tag images
        run: |
          cp .env.template .env
          docker compose -f docker-compose.deploy.yml build
          docker images
          docker ps -a
          docker tag costal-web backend:web-$COMMIT_TAG
          docker tag costal-adaptive-engine backend:adaptive-engine-$COMMIT_TAG

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Tag, and push latest docker image to Amazon ECR
        run: |
          docker tag backend:web-$COMMIT_TAG $ECR_REPOSITORY:web-$COMMIT_TAG
          docker tag backend:adaptive-engine-$COMMIT_TAG $ECR_REPOSITORY:adaptive-engine-$COMMIT_TAG
          docker push $ECR_REPOSITORY:web-$COMMIT_TAG
          docker push $ECR_REPOSITORY:adaptive-engine-$COMMIT_TAG

      - name: Build release bundle
        run: |
          zip $COMMIT_TAG.zip docker-compose-aws.yml -r devops/
          aws s3 cp $COMMIT_TAG.zip $DEPLOY_BUNDLE_BUCKET

      - name: Install Boto and AWS CLI
        run: pip install awscli boto3

      - name: Setup Launch Template
        run: |
          python devops/setup.py
        env:
          LAUNCH_TEMPLATE_ID: ${{ vars.LAUNCH_TEMPLATE_ID }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          CANVAS_URL: ${{ secrets.CANVAS_URL }}
          API_CLIENT_ID: ${{ secrets.API_CLIENT_ID }}
          API_CLIENT_ID_SECRET: ${{ secrets.API_CLIENT_ID_SECRET }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}

      - name: Restart instance
        run: aws autoscaling start-instance-refresh --auto-scaling-group-name costal-asg
